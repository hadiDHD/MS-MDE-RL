package msmderl.gui;//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import com.google.gson.Gson;
import msmderl.data.Method;
import msmderl.data.MethodModel;
import msmderl.data.Microservice;
import msmderl.data.MicroserviceModel;
import msmderl.individual.IndividualMDP;
import msmderl.individual.IndividualState;
import org.deeplearning4j.rl4j.policy.DQNPolicy;

import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.stream.Stream;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;

public class Solver extends JPanel {
    private JButton jcomp1;
    private JLabel jcomp2;
    private JTextField jcomp3;
    private JLabel jcomp4;
    private JTextField jcomp5;
    private JButton jcomp6;
    private JLabel jcomp7;
    private JTextField jcomp8;
    private JButton jcomp9;
    private JButton jcomp10;
    private JTextArea jcomp11;
    private JScrollPane jcomp12;

    private File NNET;
    private File MS;
    private File methods;

    public Solver() {
        //construct components
        jcomp1 = new JButton("Browse");
        jcomp2 = new JLabel("Nueral Network: ");
        jcomp3 = new JTextField(5);
        jcomp4 = new JLabel("Microservices Model: ");
        jcomp5 = new JTextField(5);
        jcomp6 = new JButton("Browse");
        jcomp7 = new JLabel("Methods Model: ");
        jcomp8 = new JTextField(5);
        jcomp9 = new JButton("Browse");
        jcomp10 = new JButton("Solve");
        jcomp11 = new JTextArea(5, 5);
        jcomp12 = new JScrollPane(jcomp11);

        jcomp1.addActionListener(e -> {
            NNET = open(false);
            jcomp3.setText(NNET.getName());
        });
        jcomp6.addActionListener(e -> {
            MS = open(true);
            jcomp5.setText(MS.getName());
        });
        jcomp9.addActionListener(e -> {
            methods = open(true);
            jcomp8.setText(methods.getName());
        });

        jcomp10.addActionListener(e -> {
            solve();
        });
        jcomp11.setLineWrap(true);
        jcomp11.setDisabledTextColor(Color.BLACK);

        //set components properties
        jcomp3.setEnabled(false);
        jcomp5.setEnabled(false);
        jcomp8.setEnabled(false);
        jcomp11.setEnabled(false);

        //adjust size and set layout
        setPreferredSize(new Dimension(752, 431));
        setLayout(null);

        //add components
        add(jcomp1);
        add(jcomp2);
        add(jcomp3);
        add(jcomp4);
        add(jcomp5);
        add(jcomp6);
        add(jcomp7);
        add(jcomp8);
        add(jcomp9);
        add(jcomp10);
        add(jcomp12);

        //set component bounds (only needed by Absolute Positioning)
        jcomp1.setBounds(640, 25, 100, 25);
        jcomp2.setBounds(25, 25, 100, 25);
        jcomp3.setBounds(175, 25, 415, 25);
        jcomp4.setBounds(25, 70, 135, 25);
        jcomp5.setBounds(175, 70, 415, 25);
        jcomp6.setBounds(640, 70, 100, 25);
        jcomp7.setBounds(25, 115, 100, 25);
        jcomp8.setBounds(175, 115, 415, 25);
        jcomp9.setBounds(640, 115, 100, 25);
        jcomp10.setBounds(330, 185, 100, 25);
        jcomp12.setBounds(35, 250, 685, 165);
    }

    private File open(boolean json) {
        JFileChooser fileChooser = new JFileChooser();
        if (json) {
            fileChooser.addChoosableFileFilter(new FileFilter() {
                @Override
                public boolean accept(File f) {
                    return f.getName().toLowerCase().endsWith(".json");
                }

                @Override
                public String getDescription() {
                    return "json";
                }
            });
        }
        fileChooser.showOpenDialog(null);
        return fileChooser.getSelectedFile();
    }

    private void solve() {
        try {
            Gson gson = new Gson();

            MicroserviceModel serviceModel = gson.fromJson(readLineByLineJava8(MS.getAbsolutePath()), MicroserviceModel.class);

            MethodModel methodModel = gson.fromJson(readLineByLineJava8(methods.getAbsolutePath()), MethodModel.class);

            solveRealProblem(serviceModel.getServices(), methodModel.getMethods());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String readLineByLineJava8(String filePath) {
        StringBuilder contentBuilder = new StringBuilder();
        try (Stream<String> stream = Files.lines(Paths.get(filePath), StandardCharsets.UTF_8)) {
            stream.forEach(s -> contentBuilder.append(s).append("\n"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return contentBuilder.toString();
    }


    private void solveRealProblem(Microservice[] microservices, Method[] methods) throws Exception {
        IndividualMDP mdp2 = new IndividualMDP(microservices, methods);

        DQNPolicy<IndividualState> pol2 = loadPreviousAgent();

        playByStep(mdp2, pol2);
    }

    public void playByStep(IndividualMDP mdp, DQNPolicy<IndividualState> policy) throws IOException {
        policy.play(mdp);
        jcomp11.setText(mdp.printFinalResult());
    }

    private DQNPolicy<IndividualState> loadPreviousAgent() throws IOException {
        System.out.println(NNET.getAbsolutePath());
        return DQNPolicy.load(NNET.getAbsolutePath());
    }


    public static void main(String[] args) {
        JFrame frame = new JFrame("Solver");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(new Solver());
        frame.pack();
        frame.setVisible(true);
    }
}
